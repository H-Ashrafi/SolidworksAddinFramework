<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>

<# Type[] types = new[] {
    typeof(float), typeof(double), typeof(Int64),
    typeof(UInt16), typeof(UInt32), typeof(UInt64)
    };
#>

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace SolidworksAddinFramework {

    <# foreach (var type in types) { 
	   var tName = type.Name;
	   var className = "Range" + char.ToUpper(tName[0]) + tName.Substring(1);
    #>

    public struct <#=className#> :IEnumerable<<#= tName #>>
    {
        private readonly <#=tName#> _Min;
        private readonly <#=tName#> _Max;


        public <#=className#>(IEnumerable<<#=tName#>> values)
        {
            _Min = <#=tName#>.MaxValue;
            _Max = <#=tName#>.MinValue;
            foreach (var value in values)
            {
                _Min = Math.Min(value, _Min);
                _Max = Math.Max(value, _Max);
            }
        }

        public <#=tName#> Min
        {
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return _Min; }
        }

        public <#=tName#> Max
        {
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return _Max; }
        }


        public <#=className#>(<#=tName#> min, <#=tName#> max)
        {
			Debug.Assert(min <= max);
            _Min = min;
            _Max = max;

        }

        public <#=className#>(<#=tName#> min, <#=tName#> max, bool checkBounds)
        {
			if(checkBounds)
				Debug.Assert(min <= max);
            _Min = min;
            _Max = max;

        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=className#> operator +(<#=className#> range, <#=tName#> value)
        {
            // Not implemented with Min Max for performance reasons
            var oldMin = range._Min;
            var oldMax = range._Max;
            var min = value < oldMin ? value : oldMin;
            var max = value > oldMax ? value : oldMax;
            return new <#=className#>(min, max);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Overlaps(<#=className#> other)
        {
            if (_Max < other._Min)
                return false;
            if (_Min > other._Max)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=className#> Intersect(<#=className#> other)
        {
            var min = Math.Max(_Min, other._Min);
            var max = Math.Min(_Max, other._Max);

            return new <#=className#>(min, max);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=className#> Extend(<#= tName#> value)
        {
            var min = value < _Min ? value : _Min;
            var max = value > _Max ? value : _Max;

            return new <#=className#>(min, max);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Contains(<#=tName#> value)
        {
            return value > _Min && value < _Max;
        }

        public IEnumerator<<#=tName#>> GetEnumerator()
        {
            yield return _Min;
            yield return _Max;
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public static <#=className#> MaxRange =>
            new <#=className#>(<#=tName#>.MinValue, <#=tName#>.MaxValue);
		public static <#=className#> MaxRangeInverted => 
			new <#= className #>(<#= tName #>.MaxValue, <#= tName#>.MinValue, false);
    }



    <#
    } #>
}